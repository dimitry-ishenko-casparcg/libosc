////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020 Dimitry Ishenko
// Contact: dimitry (dot) ishenko (at) (gee) mail (dot) com
//
// Distributed under the GNU GPL license. See the LICENSE.md file for details.

////////////////////////////////////////////////////////////////////////////////
#include "types.hpp"
#include <arpa/inet.h>

////////////////////////////////////////////////////////////////////////////////
namespace osc::internal
{

////////////////////////////////////////////////////////////////////////////////
void write_to(std::ostream& os, int32 i)
{
    i = htonl(i);
    os.write(reinterpret_cast<char*>(&i), sizeof(i));
}

////////////////////////////////////////////////////////////////////////////////
void write_to(std::ostream& os, float32 f)
{
    write_to(os, *reinterpret_cast<int32*>(&f));
}

////////////////////////////////////////////////////////////////////////////////
void write_to(std::ostream& os, string s)
{
    // add terminating null and pad to multiple of 4
    s.resize(((s.size() + 4) / 4) * 4);
    os.write(s.data(), s.size());
}

////////////////////////////////////////////////////////////////////////////////
void write_to(std::ostream& os, blob b)
{
    write_to(os, static_cast<int32>(b.size()));

    // pad to multiple of 4
    b.resize(((b.size() + 3) / 4) * 4);
    os.write(b.data(), b.size());
}

////////////////////////////////////////////////////////////////////////////////
}
